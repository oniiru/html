<?php

// register the ajax process function with wordpress
add_action("wp_ajax_stripe_plugin_process_card", "stripe_plugin_process_card");
add_action("wp_ajax_nopriv_stripe_plugin_process_card", "stripe_plugin_process_card");

function stripe_plugin_process_card() {
	global $stripe_payment_begin_callbacks, $stripe_payment_end_callbacks;

	// Get the settings
	$settings = new StripeSettings();
	
	// Create the response array
	$response = array(
		'success' => false,
		'cancel'  => false
	);

	if($_POST) {
		// For testing
		$keys = array_keys($_POST);
		$response['keys'] = array_keys($_POST);

		// Extract the extra data
		$meta = array();
		if($settings->transPrefix) {
			$meta['prefix'] = $settings->transPrefix;
		}
		foreach($keys as $key) {
			$meta[$key] = $_POST[$key];
			$response[$key] = $_POST[$key];
		}
		$names_to_remove = array('pubkey', 'amount', 'fname', 'lname', 'action', 'token');
		foreach($names_to_remove as $name) {
			unset($meta[$name]);
		}
		
		// Finalize the stipe.com description data
		if(!isset($response['description'])) {
			$response['description'] = json_encode($meta);
		}
							
		// Allow the user to hook into the ajax processing
		foreach($stripe_payment_begin_callbacks as $callback){
			call_user_func($callback, &$response);
		}
		
		if(!$response['cancel']) {

			// Load the official Stripe PHP bootstrap file
			require_once STRIPE_PAYMENTS_PLUGIN_DIR.'/stripe-php-1.6.1/lib/Stripe.php';
			
			$plan = null;
			$recurring = false;
			if($_POST['plan']) {
				$plan = $_POST['plan'];
				$recurring = true;
			}
			$response['recurring'] = $recurring;
			$pubkey = '';
			$secretKey = $settings->getSecretKey();
			$response['mode'] = $settings->isLive ? 'live' : 'test';
			if($_POST['pubkey']) {
				$pubkey = $_POST['pubkey'];
				if($pubkey == $settings->testPublicKey) {
					$secretKey = $settings->testSecretKey;
					$response['mode'] = 'test';
				}
			}
						
			// Submit the payment and charge the card.
			try {
				Stripe::setApiKey( $secretKey );


				// Get any coupon that is being used.
				//
				$coupon = null;
				if( isset( $_POST[ 'coupon' ] ) && $_POST[ 'coupon' ] != "" ) {

					// Try to retrieve the coupon.
					//
					$coupon = Stripe_Coupon::retrieve( $_POST[ 'coupon' ] );

					// Check the validity of the coupon
					//
					if( $coupon->times_redeemed >= $coupon->max_redemptions ) {
						$response['error'] = 'Coupon can only be redeemed ' . $coupon->max_redemptions . ' time(s)';
						echo json_encode($response);
						die();
					}
					$now = gmmktime();
					if( $now > $coupon->redeem_by )
					{
						$response['error'] = 'Coupon expired on ' . gmdate("M d Y H:i:s", $coupon->redeem_by) . ' UTC';
						die();
					}

					// If we made it here, the coupon is valid
					//
				}


				// Create a Stripe customer to allow
				//	charging this card at a later time.
				//
				// Create the data to submit to Stripe's secure processing
				//	Note: Card number data is not accessible. The code can
				//	only access a 'token' that was previously generated by
				//	Stripe via AJAX post.
				//
				$cust_params = array(
					'card'			=> $_POST[ 'token' ],
					'email'			=> $_POST[ 'email' ],
					'description'	=> $response[ 'description' ]
					);
				$customer = Stripe_Customer::create( $cust_params );
				$response['cust_id'] = $customer->id;
				$response['card_type'] = $customer->active_card->type;
				$response['card_last4'] = $customer->active_card->last4;

				if(!$recurring){
					// Create a single charge


					// Get the amount from the post.
					//	Discount the price if
					//	there was a coupone.
					//
					$amount = $_POST['amount'];
					if( !is_null( $coupon ) ) {
						$response['amount_before'] = $amount;
						$amount = intval( $amount * (1 - $coupon->percent_off / 100.0) );
						$response['amount_after'] = $amount;

						//$coupon->times_redeemed--;
						//$coupon->delete();
						//Stripe_Coupon::create($coupon->toArray());
					}
					
					// Create the charge.
					//
					$params = array(
						'amount'		=> $amount,
						'currency'		=> $settings->currencySymbol,
						'customer'		=> $customer->id,
						'description'	=> $response[ 'description' ]
					);
					$charge = Stripe_Charge::create($params);

					// Get the amount from the result.
					//
					$amount = number_format($charge->amount/100, 2);

					// Add to the response.
					//
					$response['charge'] = $charge;
					$response['success']		= true;
					$response['amount']			= $amount;
					$response['id']				= $charge->id;
					$response['card_type']		= $charge->card->type;
					$response['card_last4']		= $charge->card->last4;

				} else {
					// Create a recurring payment
					
					// Create the data to submit to Stripe's secure processing
					//	Note: Card number data is not accessible. The code can
					//	only access a 'token' that was previously generated by
					//	Stripe via AJAX post.
					$params = array(
						'plan'			=> $plan
					);

					// Apply the coupon.
					//
					if( !is_null( $coupon ) ) {
						$params[ 'coupon' ] = $coupon->id;
						$response['coupon'] = $coupon->id;
					}
					$result = $customer->updateSubscription( $params );

					// Get the amount from the result.
					//	Discount the price if
					//	there was a coupone.
					//
					$amount = number_format($result->plan->amount/100, 2);
					if( !is_null( $coupon ) ) {
						$amount = $amount * (1 - $coupon->percent_off / 100.0);
						$amount = number_format( $amount, 2 );
					}

					// Add to the response.
					//
					$response['success']		= true;
					$response['plan'] 			= $plan;
					$response['amount']			= $amount;
					$response['id']				= $customer->id;
				}	
			
				// Allow the user to hook into the ajax processing
				foreach($stripe_payment_end_callbacks as $callback){
					call_user_func($callback, &$response);
				}


			} catch (Exception $e) {
				$response['error'] = $e->getMessage();
			}
		}
		
	}

	// Serialize the response back as JSON
	echo json_encode($response);
	die();
}

?>